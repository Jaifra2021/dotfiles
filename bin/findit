#!/bin/bash

# A wrapper script to find files in a specified directory, with a maxdepth,
# a particular filename pattern, modified within a certain time period, with
# results optionally piped to another command
#
# Examples:
#
#   findit . --pattern "*.md" --weeks 1
#   findit . --complex "\( -iname '*.md' -o -iname '*.txt' \)" --months 2 --depth 3
#   findit . --pattern ".*.sw[po]" --pipe "ls -gothr"
#   findit --complex "\( -iname '*.mp4' -o -iname '*.mkv' \)" --pipesort "vlc --fullscreen"
#   findit . --ipattern "*.jpg" --stamp

if [[ $(uname) == 'Darwin' ]]; then
    _find="gfind"
else
    _find="find"
fi

_dirname=$1
if [[ "${_dirname:0:2}" == "--" ]]; then
    _dirname="."
elif [[ -z "$_dirname" ]]; then
    _dirname="."
else
    shift 2>/dev/null
fi

if [[ ! -d "$_dirname" ]]; then
    echo "$_dirname is not a directory"
    exit 1
fi

while [[ -n "$1" ]]; do
    case "$1" in
        --depth)
            depth=$2
            shift ;;
        --complex)
            complex=$2
            shift ;;
        --pattern)
            pattern=$2
            shift ;;
        --ipattern)
            ipattern=$2
            shift ;;
        --months)
            months=$2
            shift ;;
        --weeks)
            weeks=$2
            shift ;;
        --days)
            days=$2
            shift ;;
        --hours)
            hours=$2
            shift ;;
        --minutes)
            minutes=$2
            shift ;;
        --pipesort)
            pipesort=$2
            shift ;;
        --pipe)
            pipe=$2
            shift ;;
        --stamp)
            stamp="-printf '%TY_%Tm%Td-%Ta-%TH%TM%.2TS %p\n'"
            ;;
        --help)
            echo "Usage: findit [dir] [options]"
            echo -e "\n  Wrapper to the find command\n\nOptions:\n"
            echo "  --depth number              maxdepth to search for files"
            echo "  --pattern string            filename pattern"
            echo "  --ipattern string           filname pattern (case insensitive)"
            echo "  --complex string            raw options passed directly to 'find'"
            echo "  --months number             only match files modified in a number of months"
            echo "  --weeks number              only match files modified in a number of weeks"
            echo "  --days number               only match files modified in a number of days"
            echo "  --hours number              only match files modified in a number of hours"
            echo "  --minutes number            only match files modified in a number of minutes"
            echo "  --pipe command              pipe files to a command"
            echo "  --pipesort command          pipe sorted files to a command"
            echo "  --stamp                     prepend timestamps to output"
            echo "  --help                      show this message and exit"
            echo -e '\nExamples:\n'
            echo '  findit . --pattern "*.md" --weeks 1'
            echo "  findit . --complex \"\( -iname '*.md' -o -iname '*.txt' \)\" --months 2 --depth 3"
            echo '  findit . --pattern ".*.sw[po]" --pipe "ls -gothr"'
            echo "  findit --complex \"\( -iname '*.mp4' -o -iname '*.mkv' \)\" --pipesort \"vlc --fullscreen\""
            echo '  findit . --ipattern "*.jpg" --stamp'
            exit 0
            ;;
        *)
            echo "Unknown parameter: $1" >&2
            exit 1
    esac

    if ! shift; then
        echo "Missing parameter argument" >&2
        exit 1
    fi
done

if [[ "$depth" == [0-9]* ]]; then
    find_cmd="$_find $_dirname -maxdepth $depth -type f"
else
    find_cmd="$_find $_dirname -type f"
fi

if [[ -n "$pattern" ]]; then
    find_cmd="$find_cmd -name '$pattern'"
elif [[ -n "$ipattern" ]]; then
    find_cmd="$find_cmd -iname '$ipattern'"
elif [[ -n "$complex" ]]; then
    find_cmd="$find_cmd $complex"
fi

if [[ "$minutes" == [0-9]* ]]; then
    find_cmd="$find_cmd -mmin -$minutes"
elif [[ "$hours" == [0-9]* ]]; then
    find_cmd="$find_cmd -mmin -$((60 * $hours))"
elif [[ "$days" == [0-9]* ]]; then
    find_cmd="$find_cmd -mmin -$((60 * 24 * $days))"
elif [[ "$weeks" == [0-9]* ]]; then
    find_cmd="$find_cmd -mmin -$((60 * 24 * 7 * $weeks))"
elif [[ "$months" == [0-9]* ]]; then
    find_cmd="$find_cmd -mmin -$((60 * 24 * 31 * $months))"
fi

if [[ -n "$stamp" ]]; then
    if [[ -z "$pipesort" && -z "$pipe" ]]; then
        find_cmd="$find_cmd $stamp"
    fi
fi

if [[ -n "$pipesort" ]]; then
    echo "$find_cmd -print0 | sort -z | xargs -0 $pipesort" >&2
    eval "$find_cmd -print0 | sort -z" | xargs -0 $pipesort
elif [[ -n "$pipe" ]]; then
    echo "$find_cmd -print0 | xargs -0 $pipe" >&2
    eval "$find_cmd -print0" | xargs -0 $pipe
else
    echo "$find_cmd" >&2
    eval "$find_cmd"
fi
