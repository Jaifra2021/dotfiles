# Want some of the scripts in ~/bin to work if on a mac
if [[ $(uname) == 'Darwin' ]]; then
    alias xargs=gxargs
    alias sort=gsort
fi

# Call `dotfiles` to automatically move to the dotfiles directory
dotfiles() {
    [[ -f $HOME/.dotfiles_path ]] && cd $(cat $HOME/.dotfiles_path)
}

# Call `common` to automatically move to the dotfiles/shell/common.d directory
common() {
    [[ -f $HOME/.dotfiles_path ]] && cd $(cat $HOME/.dotfiles_path)/shell/common.d
}

# A wrapper around either `which`, `type -a`, or `man`
helpme() {
    cmd=$1
    [[ -z "$cmd" ]] && cmd="helpme"

    outfile="/tmp/helpme-$cmd.txt"
    rm $outfile 2>/dev/null
    touch $outfile

    # Print some help text about how this function should be invoked
    if [[ "$cmd" == "helpme" ]]; then
        echo "Usage: helpme command" >> $outfile
        echo "Use 'k' and 'j' to scroll up and down" >> $outfile
        echo -e "Use 'q' to exit.\n\n" >> $outfile
    fi

    # The `command -v` output is the same for Bash and Zsh
    cv=$(command -v $cmd)

    if [[ ! $cv =~ \/.* ]]; then
        echo -e "'$cv' is a shell function or builtin\n" >> $outfile
        echo -e "\n--------------------" >> $outfile
        if [[ -n "$BASH_VERSION" ]]; then
            echo -e "type -a $cmd\n" >> $outfile
            type -a $cmd >> $outfile
        elif [[ -n "$ZSH_VERSION" ]]; then
            echo -e "which $cmd\n" >> $outfile
            which $cmd >> $outfile
        fi
    elif [[ $cv =~ $HOME ]]; then
        echo -e "'$cv' path is in $HOME\n" >> $outfile
        cat $cv >> $outfile
    elif [[ $cv =~ alias.* ]]; then
        cat $cv >> $outfile
    else
        echo -e "${cv}\nFor more info, try 'man $cmd'"
        return 0
    fi

    less -FX $outfile
}

# Get today's autoday directory
set_autoday_dir() {
    day_dir="$HOME/autoday/$(date +%Y)/$(date +%b-%d)"
    mkdir -p "$day_dir" 2>/dev/null
    export AUTODAY_DIR="$day_dir"
}

# Add aliases for ..
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

# Set the `_all_files_glob` variable, which can be used in aliases and functions
if [[ -n "$ZSH_VERSION" ]]; then
    _all_files_glob="{.*,*}"
elif [[ -n "$BASH_VERSION" ]]; then
    _all_files_glob=".[!.]* *"
fi

pathmunge () {
if ! echo $PATH | egrep -q "(^|:)$1($|:)" ; then
   if [ "$2" = "after" ] ; then
      PATH=$PATH:$1
   else
      PATH=$1:$PATH
   fi
   export PATH
fi
}

pypathmunge () {
if ! echo $PYTHONPATH | egrep -q "(^|:)$1($|:)" ; then
   if [ "$2" = "after" ] ; then
      PYTHONPATH=$PYTHONPATH:$1
   else
      PYTHONPATH=$1:$PYTHONPATH
   fi
   export PYTHONPATH
fi
}

# Add ~/bin and any sub-directories to PATH
for somedir in $(find -L $HOME/bin -type d -print0 2>/dev/null | xargs -0); do
    pathmunge "$somedir"
done

# Add /usr/sbin directory to PATH
pathmunge /usr/sbin
pathmunge /sbin

# Source other `*.sh` files in the `common.d` directory (and sub-directories)
for somefile in $(find $HOME/.shell/common.d/ -type f -iname "*.sh" -print0 | xargs -0); do
    source $somefile
done

# Enable autoenv (to automatically execute directory's .env file when you `cd` to it).
[[ -f $HOME/.shell/extra/autoenv/activate.sh ]] && source $HOME/.shell/extra/autoenv/activate.sh

# Run the `bin/startup` script
[[ -f $HOME/bin/startup ]] && $HOME/bin/startup
