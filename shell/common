# Call `dotfiles` to automatically move to the dotfiles directory
dotfiles() {
    [[ -f $HOME/.dotfiles_path ]] && cd $(cat $HOME/.dotfiles_path)
}
dotfiless() {
    dotfiles
    pwd && tree -Fa -I '.git|*.swp|backup_dotfiles' && git status
}

# Call `common` to automatically move to the dotfiles/shell/common.d directory
common() {
    [[ -f $HOME/.dotfiles_path ]] && cd $(cat $HOME/.dotfiles_path)/shell/common.d
}
commonn() {
    common
    pwd && ls -gothrA
}

# A wrapper function to find files in a specified directory, with a maxdepth,
# a particular filename pattern, and modified within a certain time period
#
# Ex:
#   _find . --pattern "*.md" --weeks 1
#   _find . --complex "\( -iname '*.md' -o -iname '*.txt' \)" --months 2 --depth 3
_find() {
    local dirname complex pattern ipattern depth months weeks days hours minutes
    dirname=$1
    shift 2>/dev/null
    [[ -z "$dirname" ]] && dirname="."
    if [[ ! -d "$dirname" ]]; then
        echo "$dirname is not a directory" >&2
        return 1
    fi

    while [[ ! -z "$1" ]]; do
        case "$1" in
            --depth)
                depth=$2
                shift ;;
            --complex)
                complex=$2
                shift ;;
            --pattern)
                pattern=$2
                shift ;;
            --ipattern)
                ipattern=$2
                shift ;;
            --months)
                months=$2
                shift ;;
            --weeks)
                weeks=$2
                shift ;;
            --days)
                days=$2
                shift ;;
            --hours)
                hours=$2
                shift ;;
            --minutes)
                minutes=$2
                shift ;;
            *)
                echo "Unknown parameter: $1" >&2
                return 1
        esac

        if ! shift; then
            echo "Missing parameter argument" >&2
            return 1
        fi
    done

    if [[ "$depth" == [0-9]* ]]; then
        find_cmd="find $dirname -maxdepth $depth -type f"
    else
        find_cmd="find $dirname -type f"
    fi

    if [[ ! -z "$pattern" ]]; then
        find_cmd="$find_cmd -name '$pattern'"
    elif [[ ! -z "$ipattern" ]]; then
        find_cmd="$find_cmd -iname '$ipattern'"
    elif [[ ! -z "$complex" ]]; then
        find_cmd="$find_cmd $complex"
    fi

    if [[ "$minutes" == [0-9]* ]]; then
        find_cmd="$find_cmd -mmin -$minutes"
    elif [[ "$hours" == [0-9]* ]]; then
        find_cmd="$find_cmd -mmin -$((60 * $hours))"
    elif [[ "$days" == [0-9]* ]]; then
        find_cmd="$find_cmd -mmin -$((60 * 24 * $days))"
    elif [[ "$weeks" == [0-9]* ]]; then
        find_cmd="$find_cmd -mmin -$((60 * 24 * 7 * $weeks))"
    elif [[ "$months" == [0-9]* ]]; then
        find_cmd="$find_cmd -mmin -$((60 * 24 * 31 * $months))"
    fi

    >&2 echo "$find_cmd"
    eval "$find_cmd"
}

# Add aliases for ..
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

# Set the `_all_files_glob` variable, which can be used in aliases and functions
if [[ -n "$ZSH_VERSION" ]]; then
    _all_files_glob="{.*,*}"
elif [[ -n "$BASH_VERSION" ]]; then
    _all_files_glob=".[!.]* *"
fi

# Source other files in the `common.d` directory
for f in $HOME/.shell/common.d/*; do
    source $f
done
