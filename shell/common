# Want some of the scripts in ~/bin to work if on a mac
if [[ $(uname) == "Darwin" ]]; then
    alias xargs=gxargs
    alias sort=gsort
fi

# Call `dotfiles` to automatically move to the dotfiles directory
dotfiles() {
    [[ -f $HOME/.dotfiles_path ]] && cd $(cat $HOME/.dotfiles_path)
}

# Call `common` to automatically move to the dotfiles/shell/common.d directory
common() {
    [[ -f $HOME/.dotfiles_path ]] && cd $(cat $HOME/.dotfiles_path)/shell/common.d
}

# A wrapper around either `which`, `type -a`, or `man`
helpme() {
    cmd=$1
    [[ -z "$cmd" ]] && cmd="helpme"

    outfile="/tmp/helpme-$cmd.txt"
    rm $outfile 2>/dev/null
    touch $outfile

    # Print some help text about how this function should be invoked
    if [[ "$cmd" == "helpme" ]]; then
        echo "Usage: helpme command" >> $outfile
        echo "Use 'k' and 'j' to scroll up and down" >> $outfile
        echo -e "Use 'q' to exit.\n\n" >> $outfile
    fi

    # The `command -v` output is the same for Bash and Zsh
    cv=$(command -v $cmd)

    if [[ ! $cv =~ \/.* ]]; then
        echo -e "'$cv' is a shell function or builtin\n" >> $outfile
        echo -e "\n--------------------" >> $outfile
        if [[ -n "$BASH_VERSION" ]]; then
            echo -e "type -a $cmd\n" >> $outfile
            type -a $cmd >> $outfile
        elif [[ -n "$ZSH_VERSION" ]]; then
            echo -e "which $cmd\n" >> $outfile
            which $cmd >> $outfile
        fi
    elif [[ $cv =~ $HOME ]]; then
        echo -e "'$cv' path is in $HOME\n" >> $outfile
        cat $cv >> $outfile
    elif [[ $cv =~ alias.* ]]; then
        cat $cv >> $outfile
    else
        echo -e "${cv}\nFor more info, try 'man $cmd'"
        return 0
    fi

    less -FX $outfile
}

# Make sure bash/zsh (tab) completions are enabled for git, docker, & docker-compose
get-completions() {
    if [[ "$1" == "clean" ]]; then
        echo -e "\nDeleting ~/.git-completion.bash ~/.docker-completion.bash, and ~/.docker-compose-completion.bash"
        rm -f ~/.git-completion.bash ~/.docker-completion.bash, and ~/.docker-compose-completion.bash 2>/dev/null
        bash_completion_dir="$(brew --prefix 2>/dev/null)/etc/bash_completion.d"
        echo -e "\n Deleting from $bash_completion_dir: docker, docker-compose, git-completion.bash"
        sudo rm -f $bash_completion_dir/docker $bash_completion_dir/docker-compose $bash_completion_dir/git-completion.bash 2>/dev/null
        echo -e "\n Deleting from ~/.zsh/completion: _docker, _docker-compose, git-completion.zsh"
        rm -f ~/.zsh/completion/_docker ~/.zsh/completion/_docker-compose ~/.zsh/completion/git-completion.zsh 2>/dev/null
    fi

    git_version=$(git --version | perl -pe 's/^git version (\S+).*$/$1/')
    docker_version=$(docker --version | perl -pe 's/^Docker version (\S+),.*/$1/')
    docker_compose_version=$(docker-compose --version | perl -pe 's/^docker-compose version (\S+),.*/$1/')
    zsh_urls=(
        https://raw.githubusercontent.com/git/git/v$git_version/contrib/completion/git-completion.zsh
        https://raw.githubusercontent.com/docker/cli/v$docker_version/contrib/completion/zsh/_docker
        https://raw.githubusercontent.com/docker/compose/$docker_compose_version/contrib/completion/zsh/_docker-compose
    )
    bash_urls=(
        https://raw.githubusercontent.com/git/git/v$git_version/contrib/completion/git-completion.bash
        https://raw.githubusercontent.com/docker/cli/v$docker_version/contrib/completion/bash/docker
        https://raw.githubusercontent.com/docker/compose/$docker_compose_version/contrib/completion/bash/docker-compose
    )
    if [[ -n "$ZSH_VERSION" ]]; then
        # Determine if there is a custom dir in $fpath already, or make $HOME/.zsh/completions
        custom_fpaths=()
        for some_path in "${fpath[@]}"; do
            if [[ "${some_path:0:11}" != "/usr/local/" && "${some_path:0:11}" != "/usr/share/" ]]; then
                custom_fpaths+=("$some_path")
            fi
        done
        if [[ -n "$custom_fpaths" ]]; then
            custom_fpath="${custom_fpaths[1]}"
        else
            custom_fpath="$HOME/.zsh/completion"
        fi
        if [[ ! -d "$custom_fpath" ]]; then
            echo -e "\n$ mkdir -pv $custom_fpath"
            mkdir -pv "$custom_fpath"
        fi
        # Copy the completion files
        for url in "${zsh_urls[@]}"; do
            fname=$(basename "$url")
            if [[ ! -f ${custom_fpath}/$fname ]]; then
                echo -e "\n$ curl -L $url > ${custom_fpath}/$fname"
                curl -L "$url" > "${custom_fpath}/$fname" || return 1
            fi
        done
        # Make sure custom_fpath is set in fpath and that compinit is loade
        fpath_set=$(grep fpath $HOME/.zshrc | egrep "($custom_fpath|HOME)")
        if [[ -z "$fpath_set" ]]; then
            echo -e "\nfpath=($custom_fpath \$fpath)" >> $HOME/.zshrc
        fi
        compinit_set=$(grep compinit $HOME/.zshrc)
        if [[ -z "$compinit_set" ]]; then
            echo -e "\nautoload -Uz compinit && compinit -i" >> $HOME/.zshrc
        fi
    elif [[ -n "$BASH_VERSION" ]]; then
        # Make sure bash-completion package is installed and set bash_completion_* vars
        if [[ $(uname) == "Darwin" ]]; then
            brew_version=$(brew --version 2>/dev/null | head -n 1)
            if [[ -z "$brew_version" ]]; then
                echo -e "\nHomebrew not found"
                return 1
            fi
            brew_completions=$(brew list bash-completion 2>/dev/null)
            if [[ -z "$brew_completions" ]]; then
                echo -e "\n$ brew install bash-completion"
                brew install bash-completion || return 1
            fi
            bash_completion_dir="$(brew --prefix)/etc/bash_completion.d"
            bash_completion_file="$(brew --prefix)/etc/bash_completion"
        elif [[ -f /usr/bin/apt-get && -n "$(groups | grep sudo)" ]]; then
            echo -e "\n$ sudo apt-get install -y bash-completion"
            sudo apt-get install -y bash-completion
            bash_completion_dir="/etc/bash_completion.d"
            bash_completion_file="/etc/bash_completion"
        else
            bash_completion_dir="$HOME/.downloaded-completions"
            mkdir -p "$bash_completion_dir" 2>/dev/null
            bash_completion_file="$HOME/.bash_completion"
        fi
        # Copy the completion files
        if [[ "$bash_completion_dir" =~ ${HOME}.* ]]; then
            for url in "${bash_urls[@]}"; do
                fname=$(basename "$url")
                if [[ ! -f $bash_completion_dir/$fname ]]; then
                    echo -e "\n$ curl -L $url > \"$bash_completion_dir/$fname\""
                    curl -L $url > "$bash_completion_dir/$fname" || return 1
                fi
            done
            cat "$bash_completion_dir"/* > "$bash_completion_file"
        else
            for url in "${bash_urls[@]}"; do
                fname=$(basename "$url")
                if [[ ! -f $bash_completion_dir/$fname ]]; then
                    echo -e "\n$ sudo sh -c \"curl -L $url > $bash_completion_dir/$fname\""
                    sudo sh -c "curl -L $url > $bash_completion_dir/$fname" || return 1
                fi
            done
        fi
    fi
}

# Get today's autoday directory
set_autoday_dir() {
    day_dir="$HOME/autoday/$(date +%Y)/$(date +%b-%d)"
    mkdir -p "$day_dir" 2>/dev/null
    export AUTODAY_DIR="$day_dir"
}

# Add aliases for ..
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

# Set the `_all_files_glob` variable, which can be used in aliases and functions
if [[ -n "$ZSH_VERSION" ]]; then
    _all_files_glob="{.*,*}"
elif [[ -n "$BASH_VERSION" ]]; then
    _all_files_glob=".[!.]* *"
fi

pathmunge () {
if ! echo $PATH | egrep -q "(^|:)$1($|:)" ; then
   if [ "$2" = "after" ] ; then
      PATH=$PATH:$1
   else
      PATH=$1:$PATH
   fi
   export PATH
fi
}

pypathmunge () {
if ! echo $PYTHONPATH | egrep -q "(^|:)$1($|:)" ; then
   if [ "$2" = "after" ] ; then
      PYTHONPATH=$PYTHONPATH:$1
   else
      PYTHONPATH=$1:$PYTHONPATH
   fi
   export PYTHONPATH
fi
}

# Add ~/bin and any sub-directories to PATH
for somedir in $(find -L $HOME/bin -type d -print0 2>/dev/null | xargs -0); do
    pathmunge "$somedir"
done

# Add /usr/sbin directory to PATH
pathmunge /usr/sbin
pathmunge /sbin

# Add mongodb tools to PATH (if on mac... `brew cask install mongodb`)
if [[ -d "/Applications/MongoDB.app/Contents/Resources/Vendor/mongodb/bin" ]]; then
    pathmunge "/Applications/MongoDB.app/Contents/Resources/Vendor/mongodb/bin"
fi

if [[ $(uname) == "Darwin" ]]; then
    # Dependency of ffmpeg
    pathmunge "/usr/local/opt/icu4c/bin"
    pathmunge "/usr/local/opt/icu4c/sbin"
fi

# Source other `*.sh` files in the `common.d` directory (and sub-directories)
for somefile in $(find $HOME/.shell/common.d/ -type f -iname "*.sh" -print0 | xargs -0); do
    source $somefile
done

# Run the `bin/startup` script
[[ -f $HOME/bin/startup ]] && $HOME/bin/startup
