# Set tab completion and matching options
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-]=** r:|=**'
autoload -Uz compinit
compinit

# Allow bulk file renaming with zmv command
autoload -U zmv

# Set number of commands stored in memory and in the history file
HISTSIZE=50000
SAVEHIST=50000
HISTFILE=$HOME/.history_zsh

# Enable bash-style comments at command line and extended zsh globbing
setopt interactivecomments extendedglob 

# Disable reporting an error when filename glob has no matches
setopt null_glob

# Use vi keybindings to navigate command line
bindkey -v

# Append to history file and save command's beginning timestamp/duration
setopt appendhistory extendedhistory

# Don't add duplicate lines, or lines starting with a space to the history file
setopt histignoredups histignorespace

# Search through command history with ^r like bash (in vi insert mode)
bindkey -M viins '^R' history-incremental-search-backward
bindkey -M viins '^S' history-incremental-search-forward

# Search through command history with vi search keys (in vi command mode)
bindkey -M vicmd '?' history-incremental-pattern-search-backward
bindkey -M vicmd '/' history-incremental-pattern-search-forward

# Function to get name of current git branch
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# Set prompt
autoload -U colors && colors
setopt PROMPT_SUBST
PROMPT="%{$fg[blue]%}%D{[%I:%M:%S]} %{$fg_bold[yellow]%}%c%{$fg[green]%}\$(parse_git_branch) %# %{$reset_color%}"

# Add function to switch to a verbose prompt
prompt-verbose() {
    PROMPT="
%{$fg_bold[green]%}%n@%m:%{$fg[white]%}%~%{$fg[green]%}\$(parse_git_branch) %{$fg[blue]%}%D{[%I:%M:%S]}
%{$fg[yellow]%}%# %{$reset_color%}"
}

# Add function to switch to a terse prompt (default)
prompt-terse() {
	PROMPT="%{$fg[blue]%}%D{[%I:%M:%S]} %{$fg_bold[yellow]%}%c%{$fg[green]%}\$(parse_git_branch) %# %{$reset_color%}"
}

# Source beu wrappers
[[ -f $HOME/.beu/wrappers.sh ]] && source $HOME/.beu/wrappers.sh

# Setup nvm (node version manager)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Source the `.shell/common` file
[[ -f $HOME/.shell/common ]] && source $HOME/.shell/common

# Setup pyenv (on linux)
if [[ $(uname) != 'Darwin' && -d $HOME/.pyenv ]]; then
    export PYENV_ROOT="$HOME/.pyenv"
    pathmunge "$PYENV_ROOT/bin"
    if command -v pyenv 1>/dev/null 2>&1; then
        eval "$(pyenv init -)"
    fi
fi

fpath=($HOME/.zsh/completion $fpath)
